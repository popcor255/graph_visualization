var htmlCanvas,ctx,win_l,win_h,size,radius,vectors,edges,mousePos,coords,blue="#5a8ded",red="#d61d45",white="#f3f7f3";function main(){htmlCanvas=document.getElementById("myCanvas"),ctx=htmlCanvas.getContext("2d"),vectors=[],edges=[],mousePos=[],win_l=.96*window.innerWidth,win_h=.96*window.innerHeight,size=Math.min(win_h,win_l),radius=size/70,ctx.canvas.width=size,ctx.canvas.height=size,htmlCanvas.addEventListener("mousedown",function(e){coords=htmlCanvas.relMouseCoords(event),mousePos=[coords.x,coords.y]},!1),htmlCanvas.addEventListener("mouseup",function(e){if(ctx.clear(),coords=htmlCanvas.relMouseCoords(event),1===e.which&&isClose(mousePos,[coords.x,coords.y],radius)){nodeEventHandler(coords,radius,!1,null)}else if(1==e.which){var t=getVectorByPosition(mousePos,vectors,null),s=getVectorByPosition([coords.x,coords.y],vectors,t);null!=t&&null!=s&&edges.push(new Edge(t,s))}drawEdges(),drawNodes(),mousePos=[coords.x,coords.y]},!1),htmlCanvas.addEventListener("wheel",function(e){scrollEvent(e)},!1)}function scrollEvent(e){var t=0,s=e.deltaY;0<vectors.length&&(s<0&&size/65<=radius&&(console.log("down"),t=-2),0<s&&radius<=size/60&&(console.log("up"),t=2)),radius+=t;for(var o=0;o<vectors.length;o++)temp=vectors[o],vectors[o].clearRegion(),vectors[o]=new Node(temp.x,temp.y,radius,temp.fill,1,o),vectors[o].draw()}function nodeEventHandler(e,t,s,o){if(e.x>t&&e.x<size-t&&e.y>t&&e.y<size-t){for(var i=0;i<vectors.length;i++)null!=(o=vectors[i])&&o.isClicked(e.x,e.y)&&(o.clearRegion(),vectors.splice(i,1),s=!0);0==s&&((o=new Node(e.x,e.y,t,white,1,vectors.length-1)).isCollision(vectors)||vectors.push(o))}}function drawEdges(){for(var e=!0,t=0;t<edges.length;t++)e=!1,console.log(doesExist(vectors,[edges[t].head,edges[t].tail])),doesExist(vectors,[edges[t].head,edges[t].tail])&&(e=!0),e?edges[t].draw():(removeEdges(edges[t].head.index),removeEdges(edges[t].tail.index))}function drawNodes(){0<vectors.length&&(temp=vectors[0],temp.clearRegion(),vectors[0]=new Node(temp.x,temp.y,temp.r,blue,1,0),vectors[0].draw());for(var e=1;e<vectors.length-1;e++)temp=vectors[e],vectors[e].clearRegion(),vectors[e]=new Node(temp.x,temp.y,temp.r,white,1,e),vectors[e].draw();1<vectors.length&&(temp=vectors[vectors.length-1],temp.clearRegion(),vectors[vectors.length-1]=new Node(temp.x,temp.y,temp.r,red,1,vectors.length-1),vectors[vectors.length-1].draw())}function removeEdges(e){for(var t=0;t<edges.length;t++)edges[t].head.index!=e&&edges[t].tail.index!=e||edges.splice(t,1)}function Edge(e,t){this.head=e,this.tail=t,this.drawn=!1,this.draw=function(){ctx.beginPath(),ctx.globalCompositeOperation="destination-over",ctx.moveTo(e.x,e.y),ctx.lineTo(t.x,t.y),ctx.strokeStyle=white,ctx.stroke(),ctx.globalCompositeOperation="source-over",this.drawn=!0},this.draw()}function Node(n,r,o,e,t,s){this.startingAngle=0,this.endAngle=2*Math.PI,this.x=n,this.y=r,this.r=o,this.lineWidth=4,this.region=size/60*2.2+this.lineWidth,this.index=s,this.fill=e,this.stroke=t,ctx.strokeStyle=white,this.draw=function(){ctx.beginPath(),ctx.arc(this.x,this.y,this.r,this.startingAngle,this.endAngle),ctx.fillStyle=this.fill,ctx.lineWidth=this.lineWidth-1,ctx.fill(),ctx.strokeStyle=this.stroke,ctx.stroke(),size/60<=o&&(ctx.font="12pt Gill Sans",ctx.fillStyle="black",ctx.textAlign="center",ctx.fillText(s,this.x,this.y+3))},this.clearRegion=function(){ctx.clearRect(this.x-this.region/2,this.y-this.region/2,this.region,this.region)},this.isClicked=function(e,t){var s=!1;return n-o<e&&e<n+o&&r-o<t&&t<r+o&&(s=!0),s},this.isCollision=function(e){for(var t=!1,s=0;s<e.length;s++)if(null!=e[s]){var o=e[s].x,i=e[s].y;o>n-this.region&&o<n+this.region&&i>r-this.region&&i<r+this.region&&(t=!0)}return t}}function relMouseCoords(e){for(var t=0,s=0,o=this;t+=o.offsetLeft-o.scrollLeft,s+=o.offsetTop-o.scrollTop,o=o.offsetParent;);return{x:e.pageX-t,y:e.pageY-s}}function isClose(e,t,s){for(var o=Math.min(e.length,t.length),i=!0,n=0;n<o;n++)s<Math.abs(e[n]-t[n])&&(i=!1);return i}function getVectorByPosition(e,t,s){for(var o=null,i=0;i<t.length;i++)if(t[i].isClicked(e[0],e[1])&&t[i]!=s){o=t[i];break}return o}function doesExist(e,t){for(var s=!1,o=!1,i=0;i<e.length;i++)if(t[0].index==e[i].index&&(s=!0),t[1].index==e[i].index&&(o=!0),1==s&&1==o)return!0;return!1}HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords,CanvasRenderingContext2D.prototype.clear=function(){ctx.clearRect(0,0,size,size)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
