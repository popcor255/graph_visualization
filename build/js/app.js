var htmlCanvas,ctx,win_l,win_h,size,radius,vectors,edges,mousePos,coords,blue="#5a8ded",red="#d61d45",white="#f3f7f3";function main(){htmlCanvas=document.getElementById("myCanvas"),ctx=htmlCanvas.getContext("2d"),vectors=[],edges=[],mousePos=[],win_l=.96*window.innerWidth,win_h=.96*window.innerHeight,size=Math.min(win_h,win_l),radius=size/70,ctx.canvas.width=size,ctx.canvas.height=size,htmlCanvas.addEventListener("mousedown",function(e){coords=htmlCanvas.relMouseCoords(event),mousePos=[coords.x,coords.y]},!1),htmlCanvas.addEventListener("mouseup",function(e){if(ctx.clear(),coords=htmlCanvas.relMouseCoords(event),1===e.which&&isClose(mousePos,[coords.x,coords.y],radius)){nodeEventHandler(coords,radius,!1,null)}else if(1==e.which){var t=getVectorByPosition(mousePos,vectors,null),o=getVectorByPosition([coords.x,coords.y],vectors,t);null!=t&&null!=o&&edges.push(new Edge(t,o))}drawNodes(),drawEdges(),mousePos=[coords.x,coords.y]},!1),htmlCanvas.addEventListener("wheel",function(e){scrollEvent(e)},!1)}function scrollEvent(e){var t=0,o=e.deltaY;0<vectors.length&&(o<0&&size/65<=radius&&(console.log("down"),t=-2),0<o&&radius<=size/60&&(console.log("up"),t=2)),radius+=t;for(var s=0;s<vectors.length;s++)temp=vectors[s],vectors[s].clearRegion(),vectors[s]=new Node(temp.x,temp.y,radius,temp.fill,1,s),vectors[s].draw()}function nodeEventHandler(e,t,o,s){if(e.x>t&&e.x<size-t&&e.y>t&&e.y<size-t){for(var i=0;i<vectors.length;i++)null!=(s=vectors[i])&&s.isClicked(e.x,e.y)&&(s.clearRegion(),removeEdges(vectors[i]),vectors.splice(i,1),o=!0);0==o&&((s=new Node(e.x,e.y,t,white,1,vectors.length-1)).isCollision(vectors)||vectors.push(s))}}function drawEdges(){for(var e=0;e<edges.length;e++)edges[e].draw()}function removeEdges(e){for(var t=null,o=null,s=edges.length-1;0<=s;)t=edges[s].head.index,o=edges[s].tail.index,t==e.index||o==e.index?edges.splice(s,1):console.log("sa"),s--}function drawNodes(){0<vectors.length&&(temp=vectors[0],temp.clearRegion(),vectors[0]=new Node(temp.x,temp.y,temp.r,blue,1,0),vectors[0].draw());for(var e=1;e<vectors.length-1;e++)temp=vectors[e],vectors[e].clearRegion(),vectors[e]=new Node(temp.x,temp.y,temp.r,white,1,e),vectors[e].draw();1<vectors.length&&(temp=vectors[vectors.length-1],temp.clearRegion(),vectors[vectors.length-1]=new Node(temp.x,temp.y,temp.r,red,1,vectors.length-1),vectors[vectors.length-1].draw())}function Edge(e,t){this.head=e,this.tail=t,this.drawn=!1,this.draw=function(){ctx.beginPath(),ctx.globalCompositeOperation="destination-over",ctx.moveTo(e.x,e.y),ctx.lineTo(t.x,t.y),ctx.strokeStyle=white,ctx.stroke(),ctx.globalCompositeOperation="source-over",this.drawn=!0},this.draw()}function Node(n,r,s,e,t,o){this.startingAngle=0,this.endAngle=2*Math.PI,this.x=n,this.y=r,this.r=s,this.lineWidth=4,this.region=size/60*2.2+this.lineWidth,this.index=o,this.fill=e,this.stroke=t,ctx.strokeStyle=white,this.draw=function(){ctx.beginPath(),ctx.arc(this.x,this.y,this.r,this.startingAngle,this.endAngle),ctx.fillStyle=this.fill,ctx.lineWidth=this.lineWidth-1,ctx.fill(),ctx.strokeStyle=this.stroke,ctx.stroke(),size/60<=s&&(ctx.font="12pt Gill Sans",ctx.fillStyle="black",ctx.textAlign="center",ctx.fillText(o,this.x,this.y+3))},this.clearRegion=function(){ctx.clearRect(this.x-this.region/2,this.y-this.region/2,this.region,this.region)},this.isClicked=function(e,t){var o=!1;return n-s<e&&e<n+s&&r-s<t&&t<r+s&&(o=!0),o},this.isCollision=function(e){for(var t=!1,o=0;o<e.length;o++)if(null!=e[o]){var s=e[o].x,i=e[o].y;s>n-this.region&&s<n+this.region&&i>r-this.region&&i<r+this.region&&(t=!0)}return t}}function relMouseCoords(e){for(var t=0,o=0,s=this;t+=s.offsetLeft-s.scrollLeft,o+=s.offsetTop-s.scrollTop,s=s.offsetParent;);return{x:e.pageX-t,y:e.pageY-o}}function isClose(e,t,o){for(var s=Math.min(e.length,t.length),i=!0,n=0;n<s;n++)o<Math.abs(e[n]-t[n])&&(i=!1);return i}function getVectorByPosition(e,t,o){for(var s=null,i=0;i<t.length;i++)if(t[i].isClicked(e[0],e[1])&&t[i]!=o){s=t[i];break}return s}HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords,CanvasRenderingContext2D.prototype.clear=function(){ctx.clearRect(0,0,size,size)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
