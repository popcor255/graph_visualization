var htmlCanvas,ctx,win_l,win_h,size,vectors,temp;function main(){htmlCanvas=document.getElementById("myCanvas"),ctx=htmlCanvas.getContext("2d"),vectors=[],win_l=window.innerWidth,win_h=window.innerHeight,size=Math.min(win_h,win_l),ctx.canvas.width=size,ctx.canvas.height=size,htmlCanvas.addEventListener("mousedown",function(t){1===t.which&&ctxEvent()},!1)}function ctxEvent(){var t=htmlCanvas.relMouseCoords(event),e=size/60,i=!1;if(t.x>e&&t.x<size-e&&t.y>e&&t.y<size-e){for(var n=0;n<vectors.length;n++){var s=vectors[n];null!=s&&s.isClicked(t.x,t.y)&&(s.clearRegion(),i=!(vectors[n]=null))}0==i&&((temp=new Node(t.x,t.y,e,"green",1)).isCollision(vectors)||(temp.draw(),vectors.push(temp)))}}function Node(o,r,n,t,e){this.startingAngle=0,this.endAngle=2*Math.PI,this.x=o,this.y=r,this.r=n,this.region=2.2*n,this.fill=t,this.stroke=e,this.draw=function(){ctx.beginPath(),ctx.arc(this.x,this.y,this.r,this.startingAngle,this.endAngle),ctx.fillStyle=this.fill,ctx.lineWidth=3,ctx.fill(),ctx.strokeStyle=this.stroke,ctx.stroke()},this.clearRegion=function(){ctx.clearRect(this.x-this.region/2,this.y-this.region/2,this.region,this.region)},this.isClicked=function(t,e){var i=!1;return o-n<t&&t<o+n&&r-n<e&&e<r+n&&(i=!0),i},this.isCollision=function(t){for(var e=!1,i=0;i<t.length;i++)if(null!=t[i]){var n=t[i].x,s=t[i].y;n>o-this.region&&n<o+this.region&&s>r-this.region&&s<r+this.region&&(e=!0)}return e}}function relMouseCoords(t){for(var e=0,i=0,n=this;e+=n.offsetLeft-n.scrollLeft,i+=n.offsetTop-n.scrollTop,n=n.offsetParent;);return{x:t.pageX-e,y:t.pageY-i}}HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
