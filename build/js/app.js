var htmlCanvas,ctx,win_l,win_h,size,radius,vectors,mousePos,blue="#5a8ded",red="#d61d45",white="#f3f7f3";function main(){htmlCanvas=document.getElementById("myCanvas"),ctx=htmlCanvas.getContext("2d"),vectors=[],mousePos=[],win_l=.96*window.innerWidth,win_h=.96*window.innerHeight,size=Math.min(win_h,win_l),radius=size/70,ctx.canvas.width=size,ctx.canvas.height=size,htmlCanvas.addEventListener("mousedown",function(e){mousePos=[e.x,e.y]},!1),htmlCanvas.addEventListener("mouseup",function(e){if(1===e.which&&isEqual(mousePos,[e.x,e.y]))ctxEvent();else getVectorByPosition(mousePos,vectors),getVectorByPosition([e.x,e.y],vectors);mousePos=[e.x,e.y]},!1),htmlCanvas.addEventListener("wheel",function(e){scrollEvent(e)},!1)}function ctxEvent(){nodeEventHandler(htmlCanvas.relMouseCoords(event),radius,!1,null)}function scrollEvent(e){var t=0,o=e.deltaY;0<vectors.length&&(o<0&&size/65<=radius&&(console.log("down"),t=-2),0<o&&radius<=size/60&&(console.log("up"),t=2)),radius+=t;for(var i=0;i<vectors.length;i++)temp=vectors[i],vectors[i].clearRegion(),vectors[i]=new Node(temp.x,temp.y,radius,temp.fill,1,i),vectors[i].draw()}function nodeEventHandler(e,t,o,i){if(e.x>t&&e.x<size-t&&e.y>t&&e.y<size-t){for(var s=0;s<vectors.length;s++)null!=(i=vectors[s])&&i.isClicked(e.x,e.y)&&(i.clearRegion(),vectors.splice(s,1),o=!0);0==o&&((i=new Node(e.x,e.y,t,white,1,vectors.length-1)).isCollision(vectors)||vectors.push(i))}0<vectors.length&&((i=vectors[0]).clearRegion(),vectors[0]=new Node(i.x,i.y,i.r,blue,1,0),vectors[0].draw());for(s=1;s<vectors.length-1;s++)i=vectors[s],vectors[s].clearRegion(),vectors[s]=new Node(i.x,i.y,i.r,white,1,s),vectors[s].draw();1<vectors.length&&((i=vectors[vectors.length-1]).clearRegion(),vectors[vectors.length-1]=new Node(i.x,i.y,i.r,red,1,vectors.length-1),vectors[vectors.length-1].draw())}function Edge(e,t){this.head=e,this.tail=t,this.draw=function(){ctx.beginPath(),ctx.globalCompositeOperation="destination-over",ctx.moveTo(e.x,e.y),ctx.lineTo(t.x,t.y),ctx.stroke(),ctx.globalCompositeOperation="source-over"}}function Node(n,r,i,e,t,o){this.startingAngle=0,this.endAngle=2*Math.PI,this.x=n,this.y=r,this.r=i,this.region=size/60*2.2,this.index=o,this.fill=e,this.stroke=t,this.draw=function(){ctx.beginPath(),ctx.arc(this.x,this.y,this.r,this.startingAngle,this.endAngle),ctx.fillStyle=this.fill,ctx.lineWidth=3,ctx.fill(),ctx.strokeStyle=this.stroke,ctx.stroke(),size/60<=i&&(ctx.font="8pt Calibri",ctx.fillStyle="black",ctx.textAlign="center",ctx.fillText(o,this.x,this.y+3))},this.clearRegion=function(){ctx.clearRect(this.x-this.region/2,this.y-this.region/2,this.region,this.region)},this.isClicked=function(e,t){var o=!1;return n-i<e&&e<n+i&&r-i<t&&t<r+i&&(o=!0),o},this.isCollision=function(e){for(var t=!1,o=0;o<e.length;o++)if(null!=e[o]){var i=e[o].x,s=e[o].y;i>n-this.region&&i<n+this.region&&s>r-this.region&&s<r+this.region&&(t=!0)}return t}}function relMouseCoords(e){for(var t=0,o=0,i=this;t+=i.offsetLeft-i.scrollLeft,o+=i.offsetTop-i.scrollTop,i=i.offsetParent;);return{x:e.pageX-t,y:e.pageY-o}}function isEqual(e,t){for(var o=Math.min(e.length,t.length),i=!0,s=0;s<o;s++)e[s]!=t[s]&&(i=!1);return i}function getVectorByPosition(e,t){}HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords,CanvasRenderingContext2D.prototype.clear=function(){ctx.clearRect(0,0,size,size),vectors=[]};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiaHRtbENhbnZhcyIsImN0eCIsIndpbl9sIiwid2luX2giLCJzaXplIiwicmFkaXVzIiwidmVjdG9ycyIsIm1vdXNlUG9zIiwiYmx1ZSIsInJlZCIsIndoaXRlIiwibWFpbiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiTWF0aCIsIm1pbiIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2IiwieCIsInkiLCJ3aGljaCIsImlzRXF1YWwiLCJjdHhFdmVudCIsImdldFZlY3RvckJ5UG9zaXRpb24iLCJzY3JvbGxFdmVudCIsIm5vZGVFdmVudEhhbmRsZXIiLCJyZWxNb3VzZUNvb3JkcyIsImV2ZW50Iiwic2Nyb2xsIiwiZGVsdGFZIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsImkiLCJ0ZW1wIiwiY2xlYXJSZWdpb24iLCJOb2RlIiwiZmlsbCIsImRyYXciLCJjb29yZHMiLCJyZW1vdmVkIiwiaXNDbGlja2VkIiwic3BsaWNlIiwiaXNDb2xsaXNpb24iLCJwdXNoIiwiciIsIkVkZ2UiLCJoZWFkIiwidGFpbCIsInRoaXMiLCJiZWdpblBhdGgiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJpbmRleCIsInN0YXJ0aW5nQW5nbGUiLCJlbmRBbmdsZSIsIlBJIiwicmVnaW9uIiwiYXJjIiwiZmlsbFN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlU3R5bGUiLCJmb250IiwidGV4dEFsaWduIiwiZmlsbFRleHQiLCJjbGVhclJlY3QiLCJpbl94IiwiaW5feSIsImNsaWNrZWQiLCJhcnIiLCJ0b3RhbE9mZnNldFgiLCJ0b3RhbE9mZnNldFkiLCJjdXJyZW50RWxlbWVudCIsIm9mZnNldExlZnQiLCJzY3JvbGxMZWZ0Iiwib2Zmc2V0VG9wIiwic2Nyb2xsVG9wIiwib2Zmc2V0UGFyZW50IiwicGFnZVgiLCJwYWdlWSIsImEiLCJiIiwicmVzdWx0IiwicG9zIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJwcm90b3R5cGUiLCJDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQiLCJjbGVhciJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsV0FDQUMsSUFDQUMsTUFDQUMsTUFDQUMsS0FDQUMsT0FDQUMsUUFDQUMsU0FFQUMsS0FBTyxVQUNQQyxJQUFNLFVBQ05DLE1BQVEsVUFFWixTQUFTQyxPQUNMWCxXQUFhWSxTQUFTQyxlQUFlLFlBQ3JDWixJQUFNRCxXQUFXYyxXQUFXLE1BQzVCUixRQUFVLEdBQ1ZDLFNBQVcsR0FDWEwsTUFBNEIsSUFBcEJhLE9BQU9DLFdBQ2ZiLE1BQTZCLElBQXJCWSxPQUFPRSxZQUNmYixLQUFPYyxLQUFLQyxJQUFJaEIsTUFBT0QsT0FDdkJHLE9BQVNELEtBQU8sR0FDaEJILElBQUltQixPQUFPQyxNQUFTakIsS0FDcEJILElBQUltQixPQUFPRSxPQUFTbEIsS0FFcEJKLFdBQVd1QixpQkFBaUIsWUFBYyxTQUFTQyxHQUMvQ2pCLFNBQVcsQ0FBQ2lCLEVBQUdDLEVBQUdELEVBQUdFLEtBQ3RCLEdBR0gxQixXQUFXdUIsaUJBQWlCLFVBQVksU0FBU0MsR0FDN0MsR0FBaUIsSUFBYkEsRUFBR0csT0FBZUMsUUFBUXJCLFNBQVUsQ0FBQ2lCLEVBQUdDLEVBQUlELEVBQUdFLElBQy9DRyxnQkFHUUMsb0JBQW9CdkIsU0FBVUQsU0FDOUJ3QixvQkFBb0IsQ0FBQ04sRUFBR0MsRUFBR0QsRUFBR0UsR0FBSXBCLFNBRzlDQyxTQUFXLENBQUNpQixFQUFHQyxFQUFHRCxFQUFHRSxLQUN0QixHQUdIMUIsV0FBV3VCLGlCQUFpQixRQUFTLFNBQVNDLEdBQzFDTyxZQUFZUCxLQUNiLEdBR1AsU0FBU0ssV0FLTEcsaUJBSmFoQyxXQUFXaUMsZUFBZUMsT0FJZDdCLFFBSFgsRUFDSCxNQU1mLFNBQVMwQixZQUFZUCxHQUNqQixJQUFJVyxFQUFTLEVB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VSxTQUM1Q1csR0FBVSxHQU0xQixPQUFPQSxHQUtmLFNBQVM1QyxlQUFlQyxHQU9wQixJQU5BLElBQUk2QyxFQUFlLEVBQ2ZDLEVBQWUsRUFHZkMsRUFBaUJ6QixLQUdqQnVCLEdBQWdCRSxFQUFlQyxXQUFhRCxFQUFlRSxXQUMzREgsR0FBZ0JDLEVBQWVHLFVBQVlILEVBQWVJLFVBRXhESixFQUFpQkEsRUFBZUssZUFLdEMsTUFBTyxDQUFDN0QsRUFIRVMsRUFBTXFELE1BQVFSLEVBR0xyRCxFQUZUUSxFQUFNc0QsTUFBUVIsR0FLNUIsU0FBU3BELFFBQVE2RCxFQUFHQyxHQUloQixJQUhBLElBQUl0RixFQUFPYyxLQUFLQyxJQUFJc0UsRUFBRXBELE9BQVFxRCxFQUFFckQsUUFDNUJzRCxHQUFTLEVBRUxuRCxFQUFJLEVBQUdBLEVBQUlwQyxFQUFNb0MsSUFDbEJpRCxFQUFFakQsSUFBTWtELEVBQUVsRCxLQUNUbUQsR0FBUyxHQUlqQixPQUFPQSxFQUdYLFNBQVM3RCxvQkFBb0I4RCxFQUFLdEYsSUFLbEN1RixrQkFBa0JDLFVBQVU3RCxlQUFpQkEsZUFFN0M4RCx5QkFBeUJELFVBQVVFLE1BQVEsV0FDdkMvRixJQUFJeUUsVUFBVSxFQUFFLEVBQUV0RSxLQUFLQSxNQUN2QkUsUUFBVSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaHRtbENhbnZhcztcbnZhciBjdHg7XG52YXIgd2luX2w7XG52YXIgd2luX2g7XG52YXIgc2l6ZTtcbnZhciByYWRpdXM7XG52YXIgdmVjdG9ycztcbnZhciBtb3VzZVBvcztcblxudmFyIGJsdWUgPSBcIiM1YThkZWRcIjtcbnZhciByZWQgPSBcIiNkNjFkNDVcIjtcbnZhciB3aGl0ZSA9IFwiI2YzZjdmM1wiO1xuXG5mdW5jdGlvbiBtYWluKCkge1xuICAgIGh0bWxDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15Q2FudmFzXCIpO1xuICAgIGN0eCA9IGh0bWxDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB2ZWN0b3JzID0gW107XG4gICAgbW91c2VQb3MgPSBbXTtcbiAgICB3aW5fbCA9IHdpbmRvdy5pbm5lcldpZHRoICogMC45NjtcbiAgICB3aW5faCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIDAuOTY7XG4gICAgc2l6ZSA9IE1hdGgubWluKHdpbl9oLCB3aW5fbCk7XG4gICAgcmFkaXVzID0gc2l6ZSAvIDcwO1xuICAgIGN0eC5jYW52YXMud2lkdGggID0gc2l6ZTtcbiAgICBjdHguY2FudmFzLmhlaWdodCA9IHNpemU7XG5cbiAgICBodG1sQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIG1vdXNlUG9zID0gW2V2LngsIGV2LnldO1xuICAgIH0sIGZhbHNlKTtcblxuXG4gICAgaHRtbENhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCAgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgaWYgKGV2LndoaWNoID09PSAxICYmIGlzRXF1YWwobW91c2VQb3MsIFtldi54ICwgZXYueV0pKSB7XG4gICAgICAgICAgICBjdHhFdmVudCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB2YXIgaCA9IGdldFZlY3RvckJ5UG9zaXRpb24obW91c2VQb3MsIHZlY3RvcnMpO1xuICAgICAgICAgICAgdmFyIHQgPSBnZXRWZWN0b3JCeVBvc2l0aW9uKFtldi54LCBldi55XSwgdmVjdG9ycyk7XG4gICAgICAgIH1cblxuICAgICAgICBtb3VzZVBvcyA9IFtldi54LCBldi55XTtcbiAgICB9LCBmYWxzZSk7XG5cblxuICAgIGh0bWxDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBmdW5jdGlvbihldikge1xuICAgICAgICBzY3JvbGxFdmVudChldik7XG4gICAgfSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBjdHhFdmVudCgpe1xuICAgIHZhciBjb29yZHMgPSBodG1sQ2FudmFzLnJlbE1vdXNlQ29vcmRzKGV2ZW50KTtcbiAgICB2YXIgcmVtb3ZlZCA9IGZhbHNlO1xuICAgIHZhciB0ZW1wID0gbnVsbDtcblxuICAgIG5vZGVFdmVudEhhbmRsZXIoY29vcmRzLCByYWRpdXMsIHJlbW92ZWQsIHRlbXApO1xuICAgIFxufVxuXG5mdW5jdGlvbiBzY3JvbGxFdmVudChldil7XG4gICAgdmFyIHNjcm9sbCA9IDA7XG4gICAgdmFyIHkgPSBldi5kZWx0YVk7XG5cbiAgICBpZih2ZWN0b3JzLmxlbmd0aCA+IDApe1xuICAgICAgICBpZiAoeSA8IDAgJiYgcmFkaXVzID49IChzaXplIC8gNjUpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRvd25cIik7XG4gICAgICAgICAgICBzY3JvbGwgPSAtMjsgICBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh5ID4gMCAmJiByYWRpdXMgPD0gKHNpemUgLyA2MCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXBcIik7XG4gICAgICAgICAgICBzY3JvbGwgPSAyOyAgIFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmFkaXVzICs9IHNjcm9sbDtcblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB2ZWN0b3JzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdGVtcCA9IHZlY3RvcnNbaV07XG4gICAgICAgIHZlY3RvcnNbaV0uY2xlYXJSZWdpb24oKTtcbiAgICAgICAgdmVjdG9yc1tpXSA9IG5ldyBOb2RlKHRlbXAueCwgdGVtcC55LCByYWRpdXMsIHRlbXAuZmlsbCwgMSwgaSk7XG4gICAgICAgIHZlY3RvcnNbaV0uZHJhdygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9kZUV2ZW50SGFuZGxlcihjb29yZHMsIHJhZGl1cywgcmVtb3ZlZCwgdGVtcCl7XG5cbiAgICAvL1RoZSBjb25kaXRpb25zIGdvIGFzIGZvbGxvd3M6XG4gICAgLy8xKSBUaGUgY2lyY2xlIG11c3QgZml0IGluIHRoZSBjYW52YXMgKGxpbmVzIDQyLTQzKVxuICAgIC8vMikgVGhlIGNpcmNsZSBtdXN0IG5vdCBvdmVybGFwIChsaW5lcyA0NylcbiAgICAvLzMpIElmIHRoZSBjaXJjbGUgaXMgYWxyZWFkeSBwcmVzZW50IGRvIG5vdCBhZGQsIGJ1dCByZW1vdmVcblxuICAgIGlmKGNvb3Jkcy54ID4gcmFkaXVzICYmIGNvb3Jkcy54IDwgc2l6ZSAtIHJhZGl1cyl7XG4gICAgICAgIGlmKGNvb3Jkcy55ID4gcmFkaXVzICYmIGNvb3Jkcy55IDwgc2l6ZSAtIHJhZGl1cyl7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdmVjdG9ycy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgdGVtcCA9IHZlY3RvcnNbaV07XG4gICAgICAgICAgICAgICAgaWYodGVtcCAhPSBudWxsICYmIHRlbXAuaXNDbGlja2VkKGNvb3Jkcy54LCBjb29yZHMueSkpe1xuICAgICAgICAgICAgICAgICAgICB0ZW1wLmNsZWFyUmVnaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHZlY3RvcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHJlbW92ZWQgPT0gZmFsc2Upe1xuICAgICAgICAgICAgICAgIHRlbXAgPSBuZXcgTm9kZShjb29yZHMueCwgY29vcmRzLnksIHJhZGl1cywgd2hpdGUsIDEsIHZlY3RvcnMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgaWYoIXRlbXAuaXNDb2xsaXNpb24odmVjdG9ycykpe1xuICAgICAgICAgICAgICAgICAgICB2ZWN0b3JzLnB1c2godGVtcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9yZWRyYXcgbm9kZXMgYXMgZm9sbG93c1xuICAgIC8vaWYgdGhlIGhlYWQgeW91ciBibHVlXG4gICAgLy9pZiB0aGUgdGFpbCB5b3VyIHJlZFxuICAgIC8vZWxzZSB5b3VyIGdyZWVuXG5cbiAgICBpZih2ZWN0b3JzLmxlbmd0aCA+IDApe1xuICAgICAgICB0ZW1wID0gdmVjdG9yc1swXTtcbiAgICAgICAgdGVtcC5jbGVhclJlZ2lvbigpO1xuICAgICAgICB2ZWN0b3JzWzBdID0gbmV3IE5vZGUodGVtcC54LCB0ZW1wLnksIHRlbXAuciwgYmx1ZSwgMSwgMCk7XG4gICAgICAgIHZlY3RvcnNbMF0uZHJhdygpO1xuICAgIH1cblxuICAgIGZvcih2YXIgaSA9IDE7IGkgPCB2ZWN0b3JzLmxlbmd0aCAtIDE7IGkrKyl7XG4gICAgICAgIHRlbXAgPSB2ZWN0b3JzW2ldO1xuICAgICAgICB2ZWN0b3JzW2ldLmNsZWFyUmVnaW9uKCk7XG4gICAgICAgIHZlY3RvcnNbaV0gPSBuZXcgTm9kZSh0ZW1wLngsIHRlbXAueSwgdGVtcC5yLCB3aGl0ZSwgMSwgaSk7XG4gICAgICAgIHZlY3RvcnNbaV0uZHJhdygpO1xuICAgIH1cblxuICAgIGlmKHZlY3RvcnMubGVuZ3RoID4gMSl7XG4gICAgICAgIHRlbXAgPSB2ZWN0b3JzW3ZlY3RvcnMubGVuZ3RoIC0gMV07XG4gICAgICAgIHRlbXAuY2xlYXJSZWdpb24oKTtcbiAgICAgICAgdmVjdG9yc1t2ZWN0b3JzLmxlbmd0aCAtIDFdID0gbmV3IE5vZGUodGVtcC54LCB0ZW1wLnksIHRlbXAuciwgcmVkLCAxLCB2ZWN0b3JzLmxlbmd0aCAtIDEpO1xuICAgICAgICB2ZWN0b3JzW3ZlY3RvcnMubGVuZ3RoIC0gMV0uZHJhdygpO1xuICAgIH1cbiAgICBcbn1cblxuZnVuY3Rpb24gRWRnZShoZWFkLCB0YWlsKXtcbiAgICB0aGlzLmhlYWQgPSBoZWFkO1xuICAgIHRoaXMudGFpbCA9IHRhaWw7XG5cbiAgICB0aGlzLmRyYXcgPSBmdW5jdGlvbigpe1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24tb3Zlcic7XG4gICAgICAgIGN0eC5tb3ZlVG8oaGVhZC54LCBoZWFkLnkpO1xuICAgICAgICBjdHgubGluZVRvKHRhaWwueCwgdGFpbC55KTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIE5vZGUoeCwgeSwgciwgZmlsbCwgc3Ryb2tlLCBpbmRleCkge1xuICAgIHRoaXMuc3RhcnRpbmdBbmdsZSA9IDA7XG4gICAgdGhpcy5lbmRBbmdsZSA9IDIgKiBNYXRoLlBJO1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnIgPSByO1xuICAgIHRoaXMucmVnaW9uID0gKHNpemUgLyA2MCkgKiAyLjI7XG4gICAgXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIHRoaXMuZmlsbCA9IGZpbGw7XG4gICAgdGhpcy5zdHJva2UgPSBzdHJva2U7XG5cbiAgICB0aGlzLmRyYXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmFyYyh0aGlzLngsIHRoaXMueSwgdGhpcy5yLCB0aGlzLnN0YXJ0aW5nQW5nbGUsIHRoaXMuZW5kQW5nbGUpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5maWxsO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMztcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5zdHJva2U7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgaWYociA+PSBzaXplIC8gNjApe1xuICAgICAgICAgICAgY3R4LmZvbnQgPSAnOHB0IENhbGlicmknO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQoaW5kZXgsIHRoaXMueCwgdGhpcy55KzMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhclJlZ2lvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHguY2xlYXJSZWN0KHRoaXMueCAtICh0aGlzLnJlZ2lvbiAvIDIpLCB0aGlzLnkgLSAodGhpcy5yZWdpb24gLyAyKSwgdGhpcy5yZWdpb24sIHRoaXMucmVnaW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzQ2xpY2tlZCA9IGZ1bmN0aW9uIChpbl94LCBpbl95KSB7XG4gICAgICAgIHZhciBjbGlja2VkID0gZmFsc2U7XG5cbiAgICAgICAgaWYoaW5feCA+ICh4IC0gcikgJiYgaW5feCA8ICh4ICsgcikpe1xuICAgICAgICAgICAgaWYoaW5feSA+ICh5IC0gcikgJiYgaW5feSA8ICh5ICsgcikpe1xuICAgICAgICAgICAgICAgIGNsaWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsaWNrZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5pc0NvbGxpc2lvbiA9IGZ1bmN0aW9uKGFycil7XG4gICAgICAgIHZhciBjbGlja2VkID0gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGlmKGFycltpXSAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICB2YXIgaW5feCA9IGFycltpXS54O1xuICAgICAgICAgICAgICAgIHZhciBpbl95ID0gYXJyW2ldLnk7XG5cbiAgICAgICAgICAgICAgICBpZihpbl94ID4gKHggLSB0aGlzLnJlZ2lvbikgJiYgaW5feCA8ICh4ICsgdGhpcy5yZWdpb24pKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoaW5feSA+ICh5IC0gdGhpcy5yZWdpb24pICYmIGluX3kgPCAoeSArIHRoaXMucmVnaW9uKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbGlja2VkO1xuXG4gICAgfVxufVxuXG5mdW5jdGlvbiByZWxNb3VzZUNvb3JkcyhldmVudCl7XG4gICAgdmFyIHRvdGFsT2Zmc2V0WCA9IDA7XG4gICAgdmFyIHRvdGFsT2Zmc2V0WSA9IDA7XG4gICAgdmFyIGNhbnZhc1ggPSAwO1xuICAgIHZhciBjYW52YXNZID0gMDtcbiAgICB2YXIgY3VycmVudEVsZW1lbnQgPSB0aGlzO1xuXG4gICAgZG97XG4gICAgICAgIHRvdGFsT2Zmc2V0WCArPSBjdXJyZW50RWxlbWVudC5vZmZzZXRMZWZ0IC0gY3VycmVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgdG90YWxPZmZzZXRZICs9IGN1cnJlbnRFbGVtZW50Lm9mZnNldFRvcCAtIGN1cnJlbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICB9XG4gICAgd2hpbGUoY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5vZmZzZXRQYXJlbnQpXG5cbiAgICBjYW52YXNYID0gZXZlbnQucGFnZVggLSB0b3RhbE9mZnNldFg7XG4gICAgY2FudmFzWSA9IGV2ZW50LnBhZ2VZIC0gdG90YWxPZmZzZXRZO1xuXG4gICAgcmV0dXJuIHt4OmNhbnZhc1gsIHk6Y2FudmFzWX1cbn1cblxuZnVuY3Rpb24gaXNFcXVhbChhLCBiKXtcbiAgICB2YXIgc2l6ZSA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gICAgdmFyIHJlc3VsdCA9IHRydWU7XG5cbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKXtcbiAgICAgICAgaWYoYVtpXSAhPSBiW2ldKXtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2V0VmVjdG9yQnlQb3NpdGlvbihwb3MsIHZlY3RvcnMpe1xuXG4gICAgcmV0dXJuO1xufVxuXG5IVE1MQ2FudmFzRWxlbWVudC5wcm90b3R5cGUucmVsTW91c2VDb29yZHMgPSByZWxNb3VzZUNvb3JkcztcblxuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCl7XG4gICAgY3R4LmNsZWFyUmVjdCgwLDAsc2l6ZSxzaXplKTtcbiAgICB2ZWN0b3JzID0gW107XG59Il19
