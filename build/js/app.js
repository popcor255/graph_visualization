var htmlCanvas,ctx,win_l,win_h,size,vectors;function main(){htmlCanvas=document.getElementById("myCanvas"),ctx=htmlCanvas.getContext("2d"),vectors=[],win_l=window.innerWidth,win_h=window.innerHeight,size=Math.min(win_h,win_l),ctx.canvas.width=size,ctx.canvas.height=size,htmlCanvas.addEventListener("mousedown",function(t){1===t.which&&ctxEvent()},!1),htmlCanvas.addEventListener("wheel",function(t){scrollEvent(t.deltaY)})}function ctxEvent(){nodeEventHandler(htmlCanvas.relMouseCoords(event),size/60,!1,null)}function scrollEvent(t){for(var e=0;e<vectors.length;e++)temp=vectors[e],vectors[e].clearRegion(),vectors[e]=new Node(temp.x,temp.y,temp.r,"white",1),vectors[e].draw()}function nodeEventHandler(t,e,n,o){if(t.x>e&&t.x<size-e&&t.y>e&&t.y<size-e){for(var i=0;i<vectors.length;i++)null!=(o=vectors[i])&&o.isClicked(t.x,t.y)&&(o.clearRegion(),vectors.splice(i,1),n=!0);0==n&&((o=new Node(t.x,t.y,e,"white",1)).isCollision(vectors)||vectors.push(o))}0<vectors.length&&((o=vectors[0]).clearRegion(),vectors[0]=new Node(o.x,o.y,o.r,"blue",1),vectors[0].draw());for(i=1;i<vectors.length-1;i++)o=vectors[i],vectors[i].clearRegion(),vectors[i]=new Node(o.x,o.y,o.r,"white",1),vectors[i].draw();1<vectors.length&&((o=vectors[vectors.length-1]).clearRegion(),vectors[vectors.length-1]=new Node(o.x,o.y,o.r,"red",1),vectors[vectors.length-1].draw())}function Edge(t,e){this.head=t,this.tail=e,this.draw=function(){ctx.beginPath(),ctx.globalCompositeOperation="destination-over",ctx.moveTo(t.x,t.y),ctx.lineTo(e.x,e.y),ctx.stroke(),ctx.globalCompositeOperation="source-over"}}function Node(s,r,o,t,e){this.startingAngle=0,this.endAngle=2*Math.PI,this.x=s,this.y=r,this.r=o,this.region=2.2*o,this.fill=t,this.stroke=e,this.draw=function(){ctx.beginPath(),ctx.arc(this.x,this.y,this.r,this.startingAngle,this.endAngle),ctx.fillStyle=this.fill,ctx.lineWidth=3,ctx.fill(),ctx.strokeStyle=this.stroke,ctx.stroke()},this.clearRegion=function(){ctx.clearRect(this.x-this.region/2,this.y-this.region/2,this.region,this.region)},this.isClicked=function(t,e){var n=!1;return s-o<t&&t<s+o&&r-o<e&&e<r+o&&(n=!0),n},this.isCollision=function(t){for(var e=!1,n=0;n<t.length;n++)if(null!=t[n]){var o=t[n].x,i=t[n].y;o>s-this.region&&o<s+this.region&&i>r-this.region&&i<r+this.region&&(e=!0)}return e}}function relMouseCoords(t){for(var e=0,n=0,o=this;e+=o.offsetLeft-o.scrollLeft,n+=o.offsetTop-o.scrollTop,o=o.offsetParent;);return{x:t.pageX-e,y:t.pageY-n}}HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords,CanvasRenderingContext2D.prototype.clear=function(){ctx.clearRect(0,0,size,size),vectors=[]};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
