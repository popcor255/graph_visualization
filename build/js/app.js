var htmlCanvas,ctx,win_l,win_h,size,vectors;function main(){htmlCanvas=document.getElementById("myCanvas"),ctx=htmlCanvas.getContext("2d"),vectors=[],win_l=window.innerWidth,win_h=window.innerHeight,size=Math.min(win_h,win_l),ctx.canvas.width=size,ctx.canvas.height=size,htmlCanvas.addEventListener("mousedown",function(t){1===t.which&&ctxEvent()},!1)}function ctxEvent(){nodeEventHandler(htmlCanvas.relMouseCoords(event),size/60,!1,null)}function nodeEventHandler(t,e,n,i){if(t.x>e&&t.x<size-e&&t.y>e&&t.y<size-e){for(var o=0;o<vectors.length;o++)null!=(i=vectors[o])&&i.isClicked(t.x,t.y)&&(i.clearRegion(),vectors.splice(o,1),n=!0);0==n&&((i=new Node(t.x,t.y,e,"green",1)).isCollision(vectors)||vectors.push(i))}0<vectors.length&&((i=vectors[0]).clearRegion(),vectors[0]=new Node(i.x,i.y,i.r,"blue",1),vectors[0].draw());for(o=1;o<vectors.length-1;o++)i=vectors[o],vectors[o].clearRegion(),vectors[o]=new Node(i.x,i.y,i.r,"green",1),vectors[o].draw();1<vectors.length&&((i=vectors[vectors.length-1]).clearRegion(),vectors[vectors.length-1]=new Node(i.x,i.y,i.r,"red",1),vectors[vectors.length-1].draw())}function Edge(t,e){this.head=t,this.tail=e,this.draw=function(){ctx.beginPath(),ctx.globalCompositeOperation="destination-over",ctx.moveTo(t.x,t.y),ctx.lineTo(e.x,e.y),ctx.stroke(),ctx.globalCompositeOperation="source-over"}}function Node(s,r,i,t,e){this.startingAngle=0,this.endAngle=2*Math.PI,this.x=s,this.y=r,this.r=i,this.region=2.2*i,this.fill=t,this.stroke=e,this.draw=function(){ctx.beginPath(),ctx.arc(this.x,this.y,this.r,this.startingAngle,this.endAngle),ctx.fillStyle=this.fill,ctx.lineWidth=3,ctx.fill(),ctx.strokeStyle=this.stroke,ctx.stroke()},this.clearRegion=function(){ctx.clearRect(this.x-this.region/2,this.y-this.region/2,this.region,this.region)},this.isClicked=function(t,e){var n=!1;return s-i<t&&t<s+i&&r-i<e&&e<r+i&&(n=!0),n},this.isCollision=function(t){for(var e=!1,n=0;n<t.length;n++)if(null!=t[n]){var i=t[n].x,o=t[n].y;i>s-this.region&&i<s+this.region&&o>r-this.region&&o<r+this.region&&(e=!0)}return e}}function relMouseCoords(t){for(var e=0,n=0,i=this;e+=i.offsetLeft-i.scrollLeft,n+=i.offsetTop-i.scrollTop,i=i.offsetParent;);return{x:t.pageX-e,y:t.pageY-n}}HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords,CanvasRenderingContext2D.prototype.clear=function(){ctx.clearRect(0,0,size,size),vectors=[]};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
