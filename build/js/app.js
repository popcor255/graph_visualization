var htmlCanvas,ctx,win_l,win_h,size,radius,vectors;function main(){htmlCanvas=document.getElementById("myCanvas"),ctx=htmlCanvas.getContext("2d"),vectors=[],win_l=window.innerWidth,win_h=window.innerHeight,size=Math.min(win_h,win_l),radius=size/60,ctx.canvas.width=size,ctx.canvas.height=size,htmlCanvas.addEventListener("mousedown",function(e){1===e.which&&ctxEvent()},!1),htmlCanvas.addEventListener("wheel",function(e){scrollEvent(e)})}function ctxEvent(){nodeEventHandler(htmlCanvas.relMouseCoords(event),radius,!1,null)}function scrollEvent(e){var t=0,n=e.deltaY;0<vectors.length&&(n<0&&size/60<=radius&&(console.log("down"),t=-2),0<n&&radius<=size/60&&(console.log("up"),t=2)),radius+=t;for(var o=0;o<vectors.length;o++)temp=vectors[o],vectors[o].clearRegion(),vectors[o]=new Node(temp.x,temp.y,radius,temp.fill,1),vectors[o].draw()}function nodeEventHandler(e,t,n,o){if(e.x>t&&e.x<size-t&&e.y>t&&e.y<size-t){for(var i=0;i<vectors.length;i++)null!=(o=vectors[i])&&o.isClicked(e.x,e.y)&&(o.clearRegion(),vectors.splice(i,1),n=!0);0==n&&((o=new Node(e.x,e.y,t,"white",1)).isCollision(vectors)||vectors.push(o))}0<vectors.length&&((o=vectors[0]).clearRegion(),vectors[0]=new Node(o.x,o.y,o.r,"blue",1),vectors[0].draw());for(i=1;i<vectors.length-1;i++)o=vectors[i],vectors[i].clearRegion(),vectors[i]=new Node(o.x,o.y,o.r,"white",1),vectors[i].draw();1<vectors.length&&((o=vectors[vectors.length-1]).clearRegion(),vectors[vectors.length-1]=new Node(o.x,o.y,o.r,"red",1),vectors[vectors.length-1].draw())}function Edge(e,t){this.head=e,this.tail=t,this.draw=function(){ctx.beginPath(),ctx.globalCompositeOperation="destination-over",ctx.moveTo(e.x,e.y),ctx.lineTo(t.x,t.y),ctx.stroke(),ctx.globalCompositeOperation="source-over"}}function Node(s,r,o,e,t){this.startingAngle=0,this.endAngle=2*Math.PI,this.x=s,this.y=r,this.r=o,this.region=2.2*o,this.fill=e,this.stroke=t,this.draw=function(){ctx.beginPath(),ctx.arc(this.x,this.y,this.r,this.startingAngle,this.endAngle),ctx.fillStyle=this.fill,ctx.lineWidth=3,ctx.fill(),ctx.strokeStyle=this.stroke,ctx.stroke()},this.clearRegion=function(){ctx.clearRect(this.x-this.region/2,this.y-this.region/2,this.region,this.region)},this.isClicked=function(e,t){var n=!1;return s-o<e&&e<s+o&&r-o<t&&t<r+o&&(n=!0),n},this.isCollision=function(e){for(var t=!1,n=0;n<e.length;n++)if(null!=e[n]){var o=e[n].x,i=e[n].y;o>s-this.region&&o<s+this.region&&i>r-this.region&&i<r+this.region&&(t=!0)}return t}}function relMouseCoords(e){for(var t=0,n=0,o=this;t+=o.offsetLeft-o.scrollLeft,n+=o.offsetTop-o.scrollTop,o=o.offsetParent;);return{x:e.pageX-t,y:e.pageY-n}}HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords,CanvasRenderingContext2D.prototype.clear=function(){ctx.clearRect(0,0,size,size),vectors=[]};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
