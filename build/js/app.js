var htmlCanvas,ctx,win_l,win_h,size,vectors;function main(){htmlCanvas=document.getElementById("myCanvas"),ctx=htmlCanvas.getContext("2d"),vectors=[],win_l=window.innerWidth,win_h=window.innerHeight,size=Math.min(win_h,win_l),ctx.canvas.width=size,ctx.canvas.height=size,htmlCanvas.addEventListener("mousedown",function(t){1===t.which&&ctxEvent()},!1)}function ctxEvent(){var t=htmlCanvas.relMouseCoords(event),i=size/60,e=!1,n=null;if(t.x>i&&t.x<size-i&&t.y>i&&t.y<size-i){for(var s=0;s<vectors.length;s++)null!=(n=vectors[s])&&n.isClicked(t.x,t.y)&&(n.clearRegion(),e=!(vectors[s]=null));0==e&&((n=new Node(t.x,t.y,i,"green",1)).isCollision(vectors)||(n.draw(),vectors.push(n)))}}function Edge(t,i,e,n){this.head=t,this.tail=i,this.weight=e,this.bi_dir=n,this.draw=function(){ctx.beginPath(),ctx.globalCompositeOperation="destination-over",ctx.moveTo(t.x,t.y),ctx.lineTo(i.x,i.y),ctx.stroke(),ctx.globalCompositeOperation="source-over"}}function Node(o,r,n,t,i){this.startingAngle=0,this.endAngle=2*Math.PI,this.x=o,this.y=r,this.r=n,this.region=2.2*n,this.fill=t,this.stroke=i,this.draw=function(){ctx.beginPath(),ctx.arc(this.x,this.y,this.r,this.startingAngle,this.endAngle),ctx.fillStyle=this.fill,ctx.lineWidth=3,ctx.fill(),ctx.strokeStyle=this.stroke,ctx.stroke()},this.clearRegion=function(){ctx.clearRect(this.x-this.region/2,this.y-this.region/2,this.region,this.region)},this.isClicked=function(t,i){var e=!1;return o-n<t&&t<o+n&&r-n<i&&i<r+n&&(e=!0),e},this.isCollision=function(t){for(var i=!1,e=0;e<t.length;e++)if(null!=t[e]){var n=t[e].x,s=t[e].y;n>o-this.region&&n<o+this.region&&s>r-this.region&&s<r+this.region&&(i=!0)}return i}}function relMouseCoords(t){for(var i=0,e=0,n=this;i+=n.offsetLeft-n.scrollLeft,e+=n.offsetTop-n.scrollTop,n=n.offsetParent;);return{x:t.pageX-i,y:t.pageY-e}}HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
