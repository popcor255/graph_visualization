var htmlCanvas,ctx,win_l,win_h,size,radius,vectors;function main(){htmlCanvas=document.getElementById("myCanvas"),ctx=htmlCanvas.getContext("2d"),vectors=[],win_l=window.innerWidth,win_h=window.innerHeight,size=Math.min(win_h,win_l),radius=size/70,ctx.canvas.width=size,ctx.canvas.height=size,htmlCanvas.addEventListener("mousedown",function(t){1===t.which&&ctxEvent()},!1),htmlCanvas.addEventListener("wheel",function(t){scrollEvent(t)})}function ctxEvent(){nodeEventHandler(htmlCanvas.relMouseCoords(event),radius,!1,null)}function scrollEvent(t){var e=0,i=t.deltaY;0<vectors.length&&(i<0&&size/65<=radius&&(console.log("down"),e=-2),0<i&&radius<=size/60&&(console.log("up"),e=2)),radius+=e;for(var n=0;n<vectors.length;n++)temp=vectors[n],vectors[n].clearRegion(),vectors[n]=new Node(temp.x,temp.y,radius,temp.fill,1,n),vectors[n].draw()}function nodeEventHandler(t,e,i,n){if(t.x>e&&t.x<size-e&&t.y>e&&t.y<size-e){for(var o=0;o<vectors.length;o++)null!=(n=vectors[o])&&n.isClicked(t.x,t.y)&&(n.clearRegion(),vectors.splice(o,1),i=!0);0==i&&((n=new Node(t.x,t.y,e,"white",1,vectors.length-1)).isCollision(vectors)||vectors.push(n))}0<vectors.length&&((n=vectors[0]).clearRegion(),vectors[0]=new Node(n.x,n.y,n.r,"blue",1,0),vectors[0].draw());for(o=1;o<vectors.length-1;o++)n=vectors[o],vectors[o].clearRegion(),vectors[o]=new Node(n.x,n.y,n.r,"white",1,o),vectors[o].draw();1<vectors.length&&((n=vectors[vectors.length-1]).clearRegion(),vectors[vectors.length-1]=new Node(n.x,n.y,n.r,"red",1,vectors.length-1),vectors[vectors.length-1].draw())}function Edge(t,e){this.head=t,this.tail=e,this.draw=function(){ctx.beginPath(),ctx.globalCompositeOperation="destination-over",ctx.moveTo(t.x,t.y),ctx.lineTo(e.x,e.y),ctx.stroke(),ctx.globalCompositeOperation="source-over"}}function Node(s,r,n,t,e,i){this.startingAngle=0,this.endAngle=2*Math.PI,this.x=s,this.y=r,this.r=n,this.region=size/60*2.2,this.index=i,this.fill=t,this.stroke=e,this.draw=function(){ctx.beginPath(),ctx.arc(this.x,this.y,this.r,this.startingAngle,this.endAngle),ctx.fillStyle=this.fill,ctx.lineWidth=3,ctx.fill(),ctx.strokeStyle=this.stroke,ctx.stroke(),size/60<=n&&(ctx.font="8pt Calibri",ctx.fillStyle="black",ctx.textAlign="center",ctx.fillText(i,this.x,this.y+3))},this.clearRegion=function(){ctx.clearRect(this.x-this.region/2,this.y-this.region/2,this.region,this.region)},this.isClicked=function(t,e){var i=!1;return s-n<t&&t<s+n&&r-n<e&&e<r+n&&(i=!0),i},this.isCollision=function(t){for(var e=!1,i=0;i<t.length;i++)if(null!=t[i]){var n=t[i].x,o=t[i].y;n>s-this.region&&n<s+this.region&&o>r-this.region&&o<r+this.region&&(e=!0)}return e}}function relMouseCoords(t){for(var e=0,i=0,n=this;e+=n.offsetLeft-n.scrollLeft,i+=n.offsetTop-n.scrollTop,n=n.offsetParent;);return{x:t.pageX-e,y:t.pageY-i}}HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords,CanvasRenderingContext2D.prototype.clear=function(){ctx.clearRect(0,0,size,size),vectors=[]};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
